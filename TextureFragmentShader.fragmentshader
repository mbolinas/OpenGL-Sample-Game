#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

uniform vec3 LightPosition_worldspace;

void main(){
    vec3 LightColor = vec3(1,1,1);
    //LightPower and distance from tutorial 8
    float LightPower = 240;
    float distance = length( LightPosition_worldspace - Position_worldspace );
    float distanceSqr = distance * distance;

    //vec3 MaterialDiffuseColor = texture(tex_color, UV).bgr;
    vec3 MaterialDiffuseColor = texture(myTextureSampler, UV).rgb;
    vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);


    vec3 n = normalize(Normal_cameraspace);
    vec3 l = normalize(LightDirection_cameraspace);
    float cosTheta = clamp(dot(n, l), 0, 1);
    //vec3 E = normalize(EyeDirection_cameraspace);
    //vec3 R = reflect(n, -l);
    color = (.1 * MaterialDiffuseColor) + (0.9 * MaterialDiffuseColor) * LightColor * LightPower * cosTheta / distanceSqr;
}